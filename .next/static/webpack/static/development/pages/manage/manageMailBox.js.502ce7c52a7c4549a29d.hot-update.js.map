{"version":3,"file":"static/webpack/static/development/pages/manage/manageMailBox.js.502ce7c52a7c4549a29d.hot-update.js","sources":["webpack:///./components/showContacts.js","webpack:///./pages/manage/manageMailBox.js"],"sourcesContent":["import React, { Component} from 'react';\nimport {Card,Segment} from 'semantic-ui-react';\n\nclass ShowContacts extends Component {\n\n  static async getInitialProps(props) {\n\n  const trustedMailBoxes = this.props.trustedMailBoxes;\n  const trustedConnections = this.props.trustedConnections;\n  const myTrustedKeys = this.props.myTrustedKeys;\n\n\n\n    return {trustedMailBoxes,trustedConnections,myTrustedKeys};\n  }\n\n  renderConnections() {\n\n    const items = this.props.trustedMailBoxes.map( (mailbox,index) => {\n      return {\n        header: `User Address: ${this.props.trustedConnections[index]}:`,\n        meta: `Public Key: ${this.props.myTrustedKeys[index]}`,\n        description: `MailBox: ${mailBox}`,\n        fluid: true,\n        color: \"yellow\",\n        raised: true\n      };\n    });\n    return <Card.Group items= {items} />;\n  }\n\n  render(){\n    return (\n      <Segment raised={true} color=\"orange\">\n      <h1>Trusted Connections</h1>\n      {this.renderConnections()}\n      </Segment>\n    );\n  }\n}\n\nexport default ShowContacts;\n","import React, { Component} from 'react';\nimport Layout from '../../components/layout';\nimport mailBox from '../../ethereum/mailBox';\nimport {Card,Segment,Grid,Button,Form,Input} from 'semantic-ui-react';\nimport { Link } from '../../routes';\nimport web3 from '../../ethereum/web3'\nimport DecryptedMessages from '../../components/decryptMessages';\nimport ShowContacts from '../../components/showContacts';\n\nclass ManageMailBox extends Component {\n\n  static async getInitialProps(props) {\n    const myMailBox = mailBox(props.query.address);\n    const mailBoxAddress = props.query.address;\n    const userName = await myMailBox.methods.userName().call();\n    const myPublicKey = await myMailBox.methods.publicKey().call();\n    const me = await myMailBox.methods.me().call();\n    const numMessages= await myMailBox.methods.numberOfMessages().call();\n    const trustedConnections = await myMailBox.methods.getMyTrustedConnections().call();\n    const trustedMailBoxes = await myMailBox.methods.getMyTrustedMailBoxes().call();\n    const accounts = await web3.eth.getAccounts();\n\n    var myTrustedKeys = [];\n    for(var i=0;i<trustedConnections.length;i++){\n      var key = await myMailBox.methods.myTrustedPublicKeys(i).call();\n      myTrustedKeys[i]=key;\n    }\n    var messages = [];\n    for(var i=0;i<numMessages;i++){\n      var message = await myMailBox.methods.mailbox(i).call();\n      messages[i]=message;\n    }\n    var managerLogIn = false;\n    if(accounts[0]==me){\n      managerLogIn=true;\n    }\n\n    return {myMailBox,mailBoxAddress,userName,myPublicKey,me,numMessages,messages,trustedConnections,trustedMailBoxes,myTrustedKeys,managerLogIn};\n  }\n\n  state = {\n    showDecryptedMessages: false,\n    privateKey: ''\n  }\n\n\n\n    renderMessages() {\n      const items = this.props.messages.map( (message,index) => {\n        return {\n          header: `Message Number: ${index+1}`,\n          meta: `${message}`,\n          fluid: true,\n          color: \"green\",\n          raised: true\n        };\n      });\n      return <Card.Group items= {items} />;\n    }\n\n    renderDecryptedMessages(){\n      return(\n        <DecryptedMessages messages={this.props.messages} privateKey={this.state.privateKey}/>\n      );\n    }\n\n    onSubmit = (event) => {\n      this.setState({showDecryptedMessages:true})\n    }\n\n\n  renderForManager(){\n    return(\n      <div>\n      <Segment raised={true} color=\"orange\">\n      <h5>User Name: {this.props.userName}<br/><small>{this.props.me}</small></h5>\n      <h5>MailBox Address: <br/><small>{this.props.mailBoxAddress}</small></h5>\n      <h5>Number of Messages: {this.props.numMessages}</h5>\n      <h5>My Public Key: <br/><small>{this.props.myPublicKey}</small></h5>\n      <h5>Number of Trusted Connections: {this.props.trustedConnections.length}</h5>\n      </Segment>\n      <Segment raised={true} color=\"purple\">\n      <h1>Encrypted Inbox</h1>\n      {this.renderMessages()}\n      </Segment>\n      <Segment raised={true} color=\"blue\">\n\n      <Form onSubmit={this.onSubmit}>\n      <Form.Field>\n        <label>Enter Your PRIVATE key to Decrypt Messages. <br/><small><ul>\n                                                      <li>Carefull! Do not reveal your PRIVATE key to anyone.</li>\n                                                      <li>If you do not trust this site to decrypt your messages please copy the encryted messages and decrypt them yourself.</li></ul></small></label>\n        <Input\n        label=\"Private Key\"\n        labelPosition=\"right\"\n        value={this.state.privateKey}\n        onChange={event =>\n          this.setState({privateKey: event.target.value})}\n      />\n      </Form.Field>\n      <Button primary>Decrypt</Button>\n      {this.state.showDecryptedMessages && this.renderDecryptedMessages()}\n    </Form>\n    </Segment>\n    <ShowContacts trustedConnections={this.props.trustedConnections} trustedMailBoxes={this.props.trustedMailBoxes} myTrustedKeys={this.props.myTrustedKeys}/>\n      </div>\n    );\n  }\n\n  renderError(){\n    return(\n      <Segment raised={true} color=\"orange\">\n      <h1>Oops! You are not the Owner of this MailBox!</h1>\n      </Segment>\n    );\n  }\n\n  renderCondition(){\n    if(this.props.managerLogIn){\n      return (this.renderForManager());\n    }\n    return (this.renderError());\n  }\n\n\n  render(){\n    return(\n      <Layout>\n      <Segment raised={true} color=\"blue\">\n      {this.renderCondition()}\n      </Segment>\n      </Layout>\n    );\n  }\n}\n\nexport default ManageMailBox;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAKA;;;;;;AAjCA;;;;;;AAEA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAXA;AACA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AAFA;AACA;AAyBA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;;;AAOA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAJA;AAQA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;;;AAEA;AACA;AACA;AAAA;AAAA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAGA;AACA;AAEA;AAAA;AAAA;AAKA;;;;;;AA1HA;;;;;;AACA;AACA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AACA;AACA;;AADA;;;;;;AACA;AACA;;AADA;AACA;AACA;;AAHA;;;;;AAIA;AACA;AACA;;AADA;;;;;;AACA;AACA;;AADA;AACA;AACA;;AAHA;;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA7BA;AACA;AA8HA;;;;A","sourceRoot":""}